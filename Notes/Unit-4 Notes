
---

## Binary Tree: Theory Notes

---

### 1. Introduction to Binary Trees

A **Binary Tree** is a hierarchical data structure where each node has at most **two children**, usually referred to as the **left child** and **right child**.

Each node contains:

* A data element
* A pointer/reference to the left child
* A pointer/reference to the right child

---

### 2. Properties of Binary Trees

1. **Maximum nodes at level ‘l’**:
   A binary tree can have at most 2^l nodes at level `l` (starting from 0).

2. **Maximum nodes in a binary tree of height ‘h’**:
   Maximum = 2^(h+1) - 1

3. **Minimum possible height with ‘n’ nodes**:
   Height = ⌈log₂(n + 1)⌉ - 1

4. **Number of leaf nodes (L)**:
   In a full binary tree, L = (N + 1)/2, where N = total number of nodes.

5. **Number of internal nodes**:
   I = N - L, where L is the number of leaf nodes.

6. **Types of Binary Trees**:

   * **Full Binary Tree**: Every node has 0 or 2 children.
   * **Complete Binary Tree**: All levels are filled except possibly the last, and the last level is filled from left to right.
   * **Perfect Binary Tree**: All internal nodes have two children and all leaf nodes are at the same level.
   * **Skewed Binary Tree**: Nodes have only left or only right children (like a linked list).

---

### 3. Tree Traversals

Tree traversal means visiting all the nodes of a tree in some specific order.

#### a) Inorder Traversal (Left, Root, Right)

* Visit left subtree
* Visit root
* Visit right subtree

**Use**: Produces sorted order in BST.

#### b) Preorder Traversal (Root, Left, Right)

* Visit root
* Visit left subtree
* Visit right subtree

**Use**: Useful for creating a copy of the tree or prefix expressions.

#### c) Postorder Traversal (Left, Right, Root)

* Visit left subtree
* Visit right subtree
* Visit root

**Use**: Used to delete a tree or evaluate postfix expressions.

---

### 4. Expression Trees

An **expression tree** is a binary tree used to represent **arithmetic expressions**.

* Internal nodes: operators (+, -, \*, /)
* Leaf nodes: operands (constants or variables)

**Example**:

Expression: `(a + b) * (c - d)`

The expression tree will have:

* `*` at the root
* `+` as left child of `*`
* `-` as right child of `*`
* `a, b` as children of `+`
* `c, d` as children of `-`

**Use**:

* In compilers to parse and evaluate expressions
* In converting between postfix, infix, and prefix

---

### 5. Binary Search Tree (BST)

A **Binary Search Tree** is a binary tree with the following properties:

* Left subtree contains nodes with values **less than** the node’s key.
* Right subtree contains nodes with values **greater than** the node’s key.
* No duplicate keys allowed.

**Properties**:

* Inorder traversal of BST gives sorted order.
* Average-case time complexity of basic operations is O(log n) if tree is balanced.

---

### 6. Operations in Binary Search Tree

#### a) Insertion

* Start at the root.
* Compare the key to be inserted with the current node.
* If smaller, go to the left subtree.
* If larger, go to the right subtree.
* Place the new node at the appropriate null child.

**Time Complexity**:

* Best/Average: O(log n)
* Worst: O(n) (in case of skewed tree)

#### b) Deletion

There are three cases when deleting a node from a BST:

1. **Node has no children** (leaf node):
   Simply delete the node.

2. **Node has one child**:
   Replace the node with its child.

3. **Node has two children**:

   * Find the inorder successor (minimum in right subtree) or inorder predecessor (maximum in left subtree).
   * Replace the node’s value with that.
   * Delete the successor/predecessor node.

**Time Complexity**:

* Same as insertion: O(log n) on average, O(n) in worst case.

#### c) Finding Minimum and Maximum

* **Minimum**: Go as far left as possible.
* **Maximum**: Go as far right as possible.

**Time Complexity**: O(h), where h is height of the tree.

#### d) Finding kth Minimum Element

To find the kth smallest element in a BST:

* Perform **inorder traversal**, which gives nodes in sorted order.
* Keep a count of nodes visited.
* When count equals k, return that node.

**Time Complexity**: O(h + k), where h is the height of the tree.

**Note**: If augmented with node count in each subtree, the operation can be optimized to O(log n).

---


