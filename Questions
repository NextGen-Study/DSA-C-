// #include <iostream>
// #include <climits>
// using namespace std;

// class node {
// public:
//     int data;
//     node* left;
//     node* right;

//     node(int val) {
//         data = val;
//         left = right = NULL;
//     }
// };

// // Recursive insertion (manual tree building for binary tree)
// node* buildSampleTree() {
//     node* root = new node(10);
//     root->left = new node(5);
//     root->right = new node(15);
//     root->left->left = new node(2);
//     root->left->right = new node(7);
//     root->right->right = new node(20);
//     return root;
// }

// // Inorder Traversal
// void inorder(node* root) {
//     if (root == NULL) return;
//     inorder(root->left);
//     cout << root->data << " ";
//     inorder(root->right);
// }

// // Find Minimum
// int findMin(node* root) {
//     if (!root) return INT_MAX;
//     return min(root->data, min(findMin(root->left), findMin(root->right)));
// }

// // Find Maximum
// int findMax(node* root) {
//     if (!root) return INT_MIN;
//     return max(root->data, max(findMax(root->left), findMax(root->right)));
// }

// // Find Sum
// int findSum(node* root) {
//     if (!root) return 0;
//     return root->data + findSum(root->left) + findSum(root->right);
// }

// // Count Nodes
// int findCount(node* root) {
//     if (!root) return 0;
//     return 1 + findCount(root->left) + findCount(root->right);
// }

// int main() {
//     node* root = buildSampleTree();

//     cout << "Inorder Traversal: ";
//     inorder(root);
//     cout << endl;

//     cout << "Minimum Value: " << findMin(root) << endl;
//     cout << "Maximum Value: " << findMax(root) << endl;
//     cout << "Sum of all nodes: " << findSum(root) << endl;
//     cout << "Total Count of nodes: " << findCount(root) << endl;

//     return 0;
// }



#include <iostream>
#include <vector>
using namespace std;

class node {
public:
    int data;
    node* left;
    node* right;
    node(int d) {
        data = d;
        left = NULL;
        right = NULL;
    }
};

// Insertion
node* insert(node* root, int val) {
    if (root == NULL)
        return new node(val);

    if (val < root->data)
        root->left = insert(root->left, val);
    else
        root->right = insert(root->right, val);

    return root;
}

// Build BST from vector
node* buildBST(vector<int> arr) {
    node* root = NULL;
    for (int val : arr) {
        root = insert(root, val);
    }
    return root;
}

// Inorder Traversal
void inorder(node* root) {
    if (root == NULL) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

// Find Minimum
int findMin(node* root) {
    if (!root) return -1; // or INT_MAX
    while (root->left)
        root = root->left;
    return root->data;
}

// Find Maximum
int findMax(node* root) {
    if (!root) return -1; // or INT_MIN
    while (root->right)
        root = root->right;
    return root->data;
}

// Find Sum of all nodes
int findSum(node* root) {
    if (!root) return 0;
    return root->data + findSum(root->left) + findSum(root->right);
}

// Find Count of nodes
int findCount(node* root) {
    if (!root) return 0;
    return 1 + findCount(root->left) + findCount(root->right);
}

int main() {
    vector<int> arr = {5, 3, 7, 2, 4, 6, 8};

    node* root = buildBST(arr);

    cout << "Inorder Traversal: ";
    inorder(root);
    cout << endl;

    cout << "Minimum Value: " << findMin(root) << endl;
    cout << "Maximum Value: " << findMax(root) << endl;
    cout << "Sum of all nodes: " << findSum(root) << endl;
    cout << "Total Count of nodes: " << findCount(root) << endl;

    return 0;
}

